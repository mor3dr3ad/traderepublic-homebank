#!/usr/bin/env python3
"""script to convert the 'other_events.json file generated by pytr to a csv file compatible with import into homebank"""

import pandas as pd
from pandas import json_normalize
import json
import sys

if len(sys.argv) < 3:
    print("Usage: python pytrToCSv.py 'input_file' 'output_file'")
    sys.exit(1)

# initialize 
filepath = sys.argv[1]
outfile = sys.argv[2]

with open(filepath) as f:
    data = json.load(f)

# Normalize data
df = json_normalize(data)

columns = ['timestamp', 'title', 'amount.value', 'details.sections']

filtered_df = df[(df['status'] == 'EXECUTED') & (df['eventType'].isin(['card_successful_transaction', 'PAYMENT_INBOUND', 'benefits_spare_change_execution', 'PAYMENT_OUTBOUND', 'benefits_saveback_execution', 'card_refund']))]

filtered_df['timestamp'] = pd.to_datetime(filtered_df['timestamp'])
filtered_df['timestamp'] = filtered_df['timestamp'].dt.strftime('%d-%m-%Y')

mapped_df = pd.DataFrame({
    'date': filtered_df['timestamp'],         # Assuming 'timestamp' column exists in df
    'payment': 8,     # Replace with actual column name
    'info': None,       # Replace with actual column name
    'payee': filtered_df['title'],     # Replace with actual column name
    'memo': filtered_df['title'],  # Assuming 'verwendungszweck' corresponds to 'memo'
    'amount': filtered_df['amount.value'],          # Assuming 'betrag' corresponds to 'amount'
    'category': None,                         # Leave empty or map to a specific column if applicable
    'tags': None                              # Leave empty or map to a specific column if applicable
})

mapped_df.to_csv(outfile, sep=';', index=False)






